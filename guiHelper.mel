/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: guiHelper v1.0
''    Author: Jo Jurgens
''    Last Updated: September 16, 2003
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=interface#2539
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

/*
guiHelper
By Jo Jürgens

version 1.01 (fixed print flags bugs)

guiHelper is a tool meant to assist scripters when creating complex GUIs. The
user can add a guiHelper popup menu to any interface element in Maya. The menu
contains various commands, such as print name of  control, path to the control,
the control's flags (label, size, etc), and so on.

To add a guiHelper menu to a GUI element, simply call guiHelper with the full
path to the control after having created it.

Like this:

window;
	columnLayout;
	guiHelper `button`;
showWindow;

Or like this:

window;
	columnLayout;
	string $button = `button`;
	guiHelper $button;
showWindow;

You can also add guiHelper menus later on, rather than doing it in the Mel script
that builds the GUI. For example:
guiHelper MayaWindow|mayaMainWindowForm|formLayout1|formLayout12|formLayout13|formLayout40|formLayout41|newSceneButton
This will add a popupmenu to the New Scene button in the statusBar.

If you already have a popup menu attached to the control, you can add the
guiHelper menu as a submenu by calling guiHelper_addToMenu followed by the name
of the control.

window;
	columnLayout;
		string $button = `button`;
		    popupMenu;                  
		    menuItem menuItem1;         
		    menuItem menuItem2;         
		    guiHelper_addToMenu $button;
showWindow;

You can add guiHelper menus to every control in the Maya interface and in all    
open windows by calling 'guiHelper_addMenuToAll (WindowName)', for example:       
'guiHelper_addMenuToAll MayaWindow'; This may be helpful if you're trying to edit  
a part of the default interface, in which case you'll find the name of the       
control you're trying to acces. Run guiHelper_addMenuToAll and then simply right 
click the control in question to get its name, path, etc. Be aware that this can 
mess up Maya at times, so remove the menus as soon as you're done by calling     
'guiHelper_removeMenuFromAll (WindowName)'.

You can also make guiHelper print all the annotations for GUI controls by calling 
'guiHelper_printAnnotation (WindowName)'. To print a list of controls that don't 
have any annotation, call 'guiHelper_printMissingAnnotation (WindowName)'. 

To disable guiHelper, run this command: $guiHelper=1; from the commandLine or 
before loading the gui.

guiHelper also includes guiList, a window containing a list of all controls in
the GUI. You can hide interface elements by double clicking them in the list;
an easy way to identify the different controls.

If you want to make the guiList show the contents of a window that you don't
know the name of, you can use the command guiList_getWindowName with the title
of the window (the name that is displayed in the titlebar) to get the window's
name. For example 'guiList_getWindowName "Attribute Editor"' returns AEWindow,
which is the actual name of that window. You can then call 'guiList AEWindow'.

Please note that if you have the mayaLive plugin loaded, guiList will take a lot
longer to load if you're displaying the main Maya interface in it.

*/


global proc guiHelper(string $path)
{global int $guiHelper;
if ( $guiHelper==0)catch (`guiHelper_doGuiHelper 0 $path`);}



global proc guiHelper_addToMenu(string $path)
{global int $guiHelper;
if ( $guiHelper==0) catch (`guiHelper_doGuiHelper 1 $path`);
}



global proc guiHelper_doGuiHelper(int $menuOrSubMenu, string $path)
{
if	($menuOrSubMenu == 0)
	{popupMenu -p $path "guiHelperMenu";}
else	{menuItem -subMenu true -l "guiHelper";}
	{guiHelper_buildMenu $path 0; setParent -menu;}
}

global proc guiHelper_buildMenu(string $path, int $where)// $where 0 = layoutControl; 1 = guiList
{

string $pathArray[];
tokenize $path "|" $pathArray;
string $pathString = "{";
for	($tok in $pathArray)
	{$pathString += ("\"" + $tok + "\", ");}
$pathString = (`substring $pathString 1 (size($pathString) -2)` + "}");

	menuItem -l $pathArray[(`size $pathArray`-1)] -c ("print " + $pathArray[(`size $pathArray`-1)]);

	menuItem -d 1;

$menuCommand = ("print `guiHelper_printFlags " + $path + "`");
	menuItem -l "Flags" -c $menuCommand;

$menuCommand =  ("print \"\\n\"; guiHelper_doPrintPath " + $pathString + " "  + $path);
	menuItem -l "Print Path" -c $menuCommand;

	menuItem -d 1;

$menuCommand =  ("guiList " + $path );
	menuItem -l "guiList" -c $menuCommand;

$menuCommand =  ("guiHelper_revealInGuiList " + $pathArray[(`size $pathArray`-1)] + " "  + $path );
	menuItem -l "Reveal in guiList" -c $menuCommand;

	menuItem -d 1;


$menuCommand = ("print \"\\n\"; print " + $pathArray[(`size $pathArray`-2)]);
	menuItem -l "Parent" -c $menuCommand;


$menuCommand = ("guiHelper_children " + $path );
	if (`layout -q -ex $path`)menuItem -l "Children" -c $menuCommand;

$menuCommand = ("guiHelper_siblings 0 0 " + $pathString );
	menuItem -l "Siblings" -c $menuCommand;

//$menuCommand = ("guiHelper_siblings 1 0" + $pathString );
//	menuItem -l "Siblings - 1 up" -c $menuCommand;
//
//$menuCommand = ("guiHelper_siblings 2 0" + $pathString );
//	menuItem -l "Siblings - 2 up" -c $menuCommand;
	
	menuItem -d 1;
	
	menuItem -l "Delete Menu" -c ("deleteUI " + $path + "|guiHelperMenu");
	menuItem -l "Help" -c guiHelperHelp;



}


global proc string guiHelper_printFlags(string $control)
{ 
// $control can be path to control or just the name of the control

string $guiHelper_controlType = `guiHelper_controlType $control`;
string $help = `help $guiHelper_controlType`;

string $tok[];
tokenize $help "\n\r" $tok;
string $flag[];

string $controlTok[];
tokenize $control "|" $controlTok;
string $return;
string $flagName;

for	($i=4; $i<size($tok); $i++)
	{tokenize $tok[$i] " " $flag;

	if 	( $flag[1]!="-defineTemplate"
	&&	  $flag[1]!="-parent" 
	&&	  $flag[1]!="-docTag" 
	&&	  $flag[1]!="-exists" 
	&&	  $flag[1]!="-backGroundColor")
		{
		$flagName = ("     " + $flag[1]);
		
		int $numberOfSpaces = (25 - `size $flag[1]`);
		 
		for	($y=4; $y<$numberOfSpaces; $y++)
		 	{$flagName += ".";}
		 
		if	($flag[1]=="-popupMenuArray" //if return is array
		||	 $flag[1]=="-childArray")//if return is array
		 	{string $flagQuery[]
			 		= `eval ($guiHelper_controlType + " -q " + $flag[1] + " " + $control)`;
		 	 
		 	 if  (`size $flagQuery`>0)
		 	 	$return += 
		 	 		($flagName + $flagQuery[0] + " " + $flagQuery[1] + " " + $flagQuery[2] + " " + $flagQuery[3] + " " + $flagQuery[4] + " " + $flagQuery[5] + "\n");}
		
		else	{string $flagQuery 
					= `eval ($guiHelper_controlType + " -q " + $flag[1] + " " + $control)`;
			 if  (`size $flagQuery`>0)
			 	{$return += ($flagName + $flagQuery + "\n");}
			} // if return is string
		}//print $flag[1]; pn;
	}
tokenize $return "\n\r" $tok;
$return = "";
$return = ("\n________" + $controlTok[`size $controlTok`-1] + "_________\n");

//$return += $controlTok[`size $controlTok`-1];
$return += ("type: " + $guiHelper_controlType);
if	(`size  $controlTok`>1)
	{$return += ("\nPath: " + $control + "\n");}
$return += "\n";
for	($line in $tok)
	{if ($line != "") $return += ($line + "\n");}
return $return;
//return ("guiHelper_printFlags " + $control);
}





global proc guiHelper_doPrintPath(string $pathArray[], string $path)
{
print "\n____________________________________________________\n\n";

print $pathArray;
print ("\n" + $path + "\n");
}

global proc guiHelper_children(string $path)
{
print "\n\n";
print `layout -q -ca $path`;
}

global proc guiHelper_siblings(int $up, int $down, string $pathArray[])
{
string $parent = $pathArray[(((`size $pathArray`- 2)- $up)+ $down) ];
print "\n";
print ( $parent + "\n");
string $children[] = `layout -q -ca $parent`;
for	($child in $children)
	{print ("   " + $child + "\n");}
}

global proc guiHelper_revealInGuiList(string $item, string $path)
{
if	(`window -ex guiList_listWin`==0)
	{guiList $path;}

textScrollList -e -deselectAll  guiList_list;

string $allListItems[] = `textScrollList -q -allItems  guiList_list`;

for	($listItem in $allListItems)
	{if	(`gmatch $listItem (" *" + $item + "  *")`)
		{textScrollList -e -selectItem  $listItem guiList_list;}
	}
}




global proc guiList(string $pathList)
{
if	(`window -ex guiList_listWin`)
	{deleteUI guiList_listWin;}
window -title "guiList" guiList_listWin;
   string $form = `formLayout -numberOfDivisions 100`;
global string $gguiList_scrollList;
$gguiList_scrollList = `textScrollList
	-allowAutomaticSelection 1
	-allowMultiSelection 1
	-selectCommand guiHelper_printItemName
	-doubleClickCommand guiList_showHideItem
	-font smallFixedWidthFont
	guiList_list`;
	
	popupMenu;
		menuItem -l "Flags" -c "guiList_popupMenuCommands flags";
		menuItem -l "Print Path" -c "guiList_popupMenuCommands path";
			menuItem -d 1;
		menuItem -l "Parent" -c "guiList_popupMenuCommands parent";
		menuItem -l "Children" -c "guiList_popupMenuCommands children";
		menuItem -l "Siblings" -c "guiList_popupMenuCommands siblings";
			menuItem -d 1;
		menuItem -l "Show/Hide Item" -c guiList_showHideItem;
//		menuItem -l "Select children" -c guiList_selectChildren;
			menuItem -d 1;
		menuItem -l "Help" -c guiHelperHelp;

    formLayout -edit
    	-attachForm     guiList_list     "top"    5
    	-attachForm     guiList_list     "left"   5
    	-attachForm     guiList_list     "bottom" 5
    	-attachForm     guiList_list     "right"  5
    $form;
showWindow guiList_listWin;


if 	(`window -q -ex $pathList`)
	{$pathList = `guiList_getWindowRootLayout $pathList`;}
	 
	 
string $patH[];
tokenize $pathList "|" $patH;
textScrollList -e -append ($patH[0]) guiList_list;
catch (`textScrollList -e -append ("  |" + $patH[1]) guiList_list`);

string $children[];
if	(`layout -q -ex $patH[1]`)
	{$children = `layout -q -ca $patH[1]`;}
else	{$children = `layout -q -ca $patH[0]`;}




string $depth00 = "  ";
string $depth01 = "  |   ";
string $depth02 = "  |  |  ";
string $depth03 = "  |  |  |  ";
string $depth04 = "  |  |  |  |  ";
string $depth05 = "  |  |  |  |  |  ";
string $depth06 = "  |  |  |  |  |  |  ";
string $depth07 = "  |  |  |  |  |  |  |  ";
string $depth08 = "  |  |  |  |  |  |  |  |  ";
string $depth09 = "  |  |  |  |  |  |  |  |  |  ";
string $depth10 = "  |  |  |  |  |  |  |  |  |  |  ";
string $depth11 = "  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth12 = "  |  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth13 = "  |  |  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth14 = "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth15 = "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth16 = "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth17 = "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ";
string $depth18 = "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      ";


	


for	($child in $children)
	{
	if (!`guiList_exclude $child`) textScrollList -e -append ($depth01 + $child + `guiHelper_typeInfo $depth01 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth02 + $child + `guiHelper_typeInfo $depth02 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth03 + $child + `guiHelper_typeInfo $depth03 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); //{textScrollList -e -append ($depth03 + $child + `guiHelper_typeInfo $depth03 $child` ) guiList_list;$child =  (`setParent $child` + "|" + $child);}


 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth04 + $child + `guiHelper_typeInfo $depth04 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	 for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth05 + $child + `guiHelper_typeInfo $depth05 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	 for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth06 + $child + `guiHelper_typeInfo $depth06 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	 for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth07 + $child + `guiHelper_typeInfo $depth07 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	 for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth08 + $child + `guiHelper_typeInfo $depth08 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


 if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	 for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth09 + $child + `guiHelper_typeInfo $depth09 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

        if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	 for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth10 + $child + `guiHelper_typeInfo $depth10 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth11 + $child + `guiHelper_typeInfo $depth11 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth12 + $child + `guiHelper_typeInfo $depth12 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth13 + $child + `guiHelper_typeInfo $depth13 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth14 + $child + `guiHelper_typeInfo $depth14 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth15 + $child + `guiHelper_typeInfo $depth15 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth16 + $child + `guiHelper_typeInfo $depth16 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 

if	(`layout -q -ex  $child`)
	{string $children[] = `layout -q -ca $child`;
	for	($child in $children)
		{if (!`guiList_exclude $child`) textScrollList -e -append ($depth17 + $child + `guiHelper_typeInfo $depth17 $child` ) guiList_list; 
 if (`guiHelper_controlType $child`=="scriptedPanel") $child =  (`setParent $child` + "|" + $child); 


} } } } } } } } } } }  } } } } } } } } } } } } } } } } } } } } } }
}






//global proc guiList_popupMenuCommands(string $what)
//{
//string $items[] = `textScrollList -q -si guiList_list`;
//string $path;
//string $tok[];
//tokenize $items[0] " |" $tok;
//string $item = $tok[0];
//string $layouts[] = `lsUI -long -controls`;
//
//for	($layout in $layouts)
//	{tokenize $layout "|" $tok;
//	if ($item == $tok[`size $tok`-1])$path = $layout;
//	}
//
//switch($what)
//	{case "flags":
//		print `guiHelper_printFlags $path`;
//	break;
//	}
//}


global proc int guiList_exclude(string $child)
{
int $return;
if 	($child == "AFGlabel"
||	 $child == "AFGfield"
||	 $child == "AFGslider"
||	 $child == "mlMainFrameLayout"
||	 $child == ""
||	 `guiHelper_controlType $child` == "panel")
	{$return = 1;}
return $return;
}



global proc guiList_showHideItem()
{
string $items[] = `textScrollList -q -si  guiList_list`;
int    $index[] = `textScrollList -q -sii guiList_list`;

for	($i=0; $i<size($items); $i++)
	{string $tok[];
	 tokenize $items[$i] " |*" $tok;
	 control -e -vis (!`control -q -vis $tok[0]`) $tok[0];
	 if 	(`control -q -vis $tok[0]`==0) 
       	{textScrollList -e -removeIndexedItem  $index[$i] guiList_list;
		textScrollList -e -appendPosition  $index[$i] `substitute ($tok[0] + "   ") $items[$i] ($tok[0] + "***")` guiList_list;}
	 else  {textScrollList -e -removeIndexedItem  $index[$i] guiList_list;
		 tokenize $items[$i] "*" $tok;
		 textScrollList -e -appendPosition  $index[$i] ($tok[0] + "   " + $tok[1]) guiList_list;}
	textScrollList -e -selectIndexedItem  $index[$i] guiList_list;
	}
}




global proc guiHelper_printItemName()
{
string $selItem[]  = `textScrollList -q -selectItem guiList_list`;
string $tok[];
tokenize $selItem[0] " |" $tok;
print ("\n" + $tok[0]);
}




global proc string guiHelper_typeInfo(string $depth, string $item)
{string $type = ("(" + `guiHelper_controlType $item` + ")");

string $depthhh;
int $layoutTypeDepth = (90 - (`size $depth` + `size $item`));
//print $layoutTypeDepth;
for	($i=0; $i<$layoutTypeDepth; $i++)
	{$depthhh += " " ;}

return ($depthhh +  " " +$type);
}




global proc guiList_selectChildren()
{global string $gguiList_scrollList;
int $depth;
string $selItem[]  = `textScrollList -q -selectItem guiList_list`;

int $selIndex[] = `textScrollList -q -selectIndexedItem  guiList_list`;
string $allItems[] = `textScrollList -q -allItems  guiList_list`;
int $depth = `guiHelper_getDepth   $selItem[0]`;

for	($i=$selIndex[0]; $i<size($allItems); $i++)
	{
	if	(`guiHelper_getDepth  $allItems[$i]`>$depth)
		{textScrollList -e -selectItem $allItems[$i] $gguiList_scrollList;}
	else	{break;}
	kill;
	}
}



global proc int guiHelper_getDepth(string $item)
{
int $depth;
if (`gmatch $item "  |   *"`)
$depth = 1;
if (`gmatch $item "  |  |  *"`)
$depth = 2;
if (`gmatch $item "  |  |  |  *"`)
$depth = 3;
if (`gmatch $item "  |  |  |  |  *"`)
$depth = 4;
if (`gmatch $item "  |  |  |  |  |  *"`)
$depth = 5;
if (`gmatch $item "  |  |  |  |  |  |  *"`)
$depth = 6;
if (`gmatch $item "  |  |  |  |  |  |  |  *"`)
$depth = 7;
if (`gmatch $item "  |  |  |  |  |  |  |  |  *"`)
$depth = 8;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  *"`)
$depth = 9;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 10;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 11;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 12;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 13;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 14;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 15;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 16;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  *"`)
$depth = 17;
if (`gmatch $item "  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      *"`)
$depth = 18;

return $depth;
}


global proc string guiList_getWindowName(string $title)
{string $return = "window not found";
string $openWindows[] = `lsUI -wnd`;
for	($win in $openWindows)
	{if (`window -q -w -title $win`==$title) $return = $win;}
return $return;
}


global proc string guiHelper_controlType (string $control)
{
if (`attrColorSliderGrp           -q -ex $control`) $guiHelper_controlType = "attrColorSliderGrp"	;
if (`attrFieldGrp                 -q -ex $control`) $guiHelper_controlType = "attrFieldGrp"	;
if (`attrFieldSliderGrp           -q -ex $control`) $guiHelper_controlType = "attrFieldSliderGrp"	;
if (`attrNavigationControlGrp     -q -ex $control`) $guiHelper_controlType = "attrNavigationControlGr";
if (`button                       -q -ex $control`) $guiHelper_controlType = "button"		;
if (`canvas                       -q -ex $control`) $guiHelper_controlType = "canvas"		;
if (`channelBox                   -q -ex $control`) $guiHelper_controlType = "channelBox"		;
if (`checkBox                     -q -ex $control`) $guiHelper_controlType = "checkBox"		;
if (`checkBoxGrp                  -q -ex $control`) $guiHelper_controlType = "checkBoxGrp"	;
if (`cmdShell                     -q -ex $control`) $guiHelper_controlType = "cmdShell"		;
if (`colorIndexSliderGrp          -q -ex $control`) $guiHelper_controlType = "colorIndexSliderGrp";
if (`colorSliderButtonGrp         -q -ex $control`) $guiHelper_controlType = "colorSliderButtonGrp";
if (`colorSliderGrp               -q -ex $control`) $guiHelper_controlType = "colorSliderGrp"	;
if (`commandLine                  -q -ex $control`) $guiHelper_controlType = "commandLine"	;
if (`floatField                   -q -ex $control`) $guiHelper_controlType = "floatField"		;
if (`floatFieldGrp                -q -ex $control`) $guiHelper_controlType = "floatFieldGrp"	;
if (`floatScrollBar               -q -ex $control`) $guiHelper_controlType = "floatScrollBar"	;
if (`floatSlider                  -q -ex $control`) $guiHelper_controlType = "floatSlider"	;
if (`floatSliderButtonGrp         -q -ex $control`) $guiHelper_controlType = "floatSliderButtonGrp";
if (`floatSliderGrp               -q -ex $control`) $guiHelper_controlType = "floatSliderGrp"	;
if (`helpLine                     -q -ex $control`) $guiHelper_controlType = "helpLine"		;
if (`iconTextButton               -q -ex $control`) $guiHelper_controlType = "iconTextButton"	;
if (`iconTextCheckBox             -q -ex $control`) $guiHelper_controlType = "iconTextCheckBox"	;
if (`iconTextRadioButton          -q -ex $control`) $guiHelper_controlType = "iconTextRadioButton";
if (`iconTextRadioCollection      -q -ex $control`) $guiHelper_controlType = "iconTextRadioCollection";
if (`iconTextStaticLabel          -q -ex $control`) $guiHelper_controlType = "iconTextStaticLabel";
if (`image                        -q -ex $control`) $guiHelper_controlType = "image"		;
if (`intField                     -q -ex $control`) $guiHelper_controlType = "intField"		;
if (`intFieldGrp                  -q -ex $control`) $guiHelper_controlType = "intFieldGrp"	;
if (`intScrollBar                 -q -ex $control`) $guiHelper_controlType = "intScrollBar"	;
if (`intSlider                    -q -ex $control`) $guiHelper_controlType = "intSlider"		;
if (`intSliderGrp                 -q -ex $control`) $guiHelper_controlType = "intSliderGrp"	;
if (`layerButton                  -q -ex $control`) $guiHelper_controlType = "layerButton"	;
if (`messageLine                  -q -ex $control`) $guiHelper_controlType = "messageLine"	;
if (`nameField                    -q -ex $control`) $guiHelper_controlType = "nameField"		;
if (`palettePort                  -q -ex $control`) $guiHelper_controlType = "palettePort"	;
if (`picture                      -q -ex $control`) $guiHelper_controlType = "picture"		;
if (`progressBar                  -q -ex $control`) $guiHelper_controlType = "progressBar"	;
if (`radioButton                  -q -ex $control`) $guiHelper_controlType = "radioButton"	;
if (`radioButtonGrp               -q -ex $control`) $guiHelper_controlType = "radioButtonGrp"	;
if (`radioCollection              -q -ex $control`) $guiHelper_controlType = "radioCollection"	;
if (`rangeControl                 -q -ex $control`) $guiHelper_controlType = "rangeControl"	;
if (`scriptTable                  -q -ex $control`) $guiHelper_controlType = "scriptTable"	;
if (`scrollField                  -q -ex $control`) $guiHelper_controlType = "scrollField"	;
if (`separator                    -q -ex $control`) $guiHelper_controlType = "separator"		;
if (`shelfButton                  -q -ex $control`) $guiHelper_controlType = "shelfButton"	;
if (`shellField                   -q -ex $control`) $guiHelper_controlType = "shellField"		;
if (`soundControl                 -q -ex $control`) $guiHelper_controlType = "soundControl"	;
if (`swatchDisplayPort            -q -ex $control`) $guiHelper_controlType = "swatchDisplayPort"	;
if (`switchTable                  -q -ex $control`) $guiHelper_controlType = "switchTable"	;
if (`symbolButton                 -q -ex $control`) $guiHelper_controlType = "symbolButton"	;
if (`symbolCheckBox               -q -ex $control`) $guiHelper_controlType = "symbolCheckBox"	;
if (`text                         -q -ex $control`) $guiHelper_controlType = "text"		;
if (`textField                    -q -ex $control`) $guiHelper_controlType = "textField"		;
if (`textFieldButtonGrp           -q -ex $control`) $guiHelper_controlType = "textFieldButtonGrp"	;
if (`textFieldGrp                 -q -ex $control`) $guiHelper_controlType = "textFieldGrp"	;
if (`textScrollList               -q -ex $control`) $guiHelper_controlType = "textScrollList"	;
if (`timeControl                  -q -ex $control`) $guiHelper_controlType = "timeControl"	;
if (`timePort                     -q -ex $control`) $guiHelper_controlType = "timePort"		;
if (`toolButton                   -q -ex $control`) $guiHelper_controlType = "toolButton"		;
if (`toolCollection               -q -ex $control`) $guiHelper_controlType = "toolCollection"	;



if (`attrEnumOptionMenu           -q -ex $control`) $guiHelper_controlType = "attrEnumOptionMenu"	;
if (`columnLayout                 -q -ex $control`) $guiHelper_controlType = "columnLayout"	;
if (`formLayout                   -q -ex $control`) $guiHelper_controlType = "formLayout"		;
if (`frameLayout                  -q -ex $control`) $guiHelper_controlType = "frameLayout"	;
if (`gridLayout                   -q -ex $control`) $guiHelper_controlType = "gridLayout"		;
//if (`layout                       -q -ex $control`) $guiHelper_controlType = "layout"		;
if (`menuBarLayout                -q -ex $control`) $guiHelper_controlType = "menuBarLayout"	;
if (`optionMenu                   -q -ex $control`) $guiHelper_controlType = "optionMenu"		;
if (`paneLayout                   -q -ex $control`) $guiHelper_controlType = "paneLayout"		;
if (`rowColumnLayout              -q -ex $control`) $guiHelper_controlType = "rowColumnLayout"	;
if (`rowLayout                    -q -ex $control`) $guiHelper_controlType = "rowLayout"		;
if (`scrollLayout                 -q -ex $control`) $guiHelper_controlType = "scrollLayout"	;
if (`shelfLayout                  -q -ex $control`) $guiHelper_controlType = "shelfLayout"	;
if (`shelfTabLayout               -q -ex $control`) $guiHelper_controlType = "shelfTabLayout"	;
if (`tabLayout                    -q -ex $control`) $guiHelper_controlType = "tabLayout"		;
if (`window                       -q -ex $control`) $guiHelper_controlType = "window"		;

if (`attrEnumOptionMenuGrp        -q -ex $control`) $guiHelper_controlType = "attrEnumOptionMenuGrp";
if (`menu                         -q -ex $control`) $guiHelper_controlType = "menu"		;
if (`menuEditor                   -q -ex $control`) $guiHelper_controlType = "menuEditor"		;
if (`optionMenuGrp                -q -ex $control`) $guiHelper_controlType = "optionMenuGrp"	;
if (`popupMenu                    -q -ex $control`) $guiHelper_controlType = "popupMenu"		;
if (`radioMenuItemCollection      -q -ex $control`) $guiHelper_controlType = "radioMenuItemCollection";

if (`menuItem                     -q -ex $control`) $guiHelper_controlType = "menuItem"		;

if (`componentEditor              -q -ex $control`) $guiHelper_controlType = "componentEditor"	;
if (`hardwareRenderPanel          -q -ex $control`) $guiHelper_controlType = "hardwareRenderPanel";
if (`hyperGraph                   -q -ex $control`) $guiHelper_controlType = "hyperGraph"		;
if (`modelEditor                  -q -ex $control`) $guiHelper_controlType = "modelEditor"	;
if (`modelPanel                   -q -ex $control`) $guiHelper_controlType = "poseit_modelPanel"		;
if (`nodeOutliner                 -q -ex $control`) $guiHelper_controlType = "nodeOutliner"	;
if (`outlinerPanel                -q -ex $control`) $guiHelper_controlType = "outlinerPanel"	;
if (`panel                        -q -ex $control`) $guiHelper_controlType = "panel"		;
if (`panelConfiguration           -q -ex $control`) $guiHelper_controlType = "panelConfiguration"	;
if (`panelHistory                 -q -ex $control`) $guiHelper_controlType = "panelHistory"	;
if (`scriptedPanel                -q -ex $control`) $guiHelper_controlType = "scriptedPanel"	;
if (`setEditor                    -q -ex $control`) $guiHelper_controlType = "setEditor"		;
if (`spreadSheetEditor            -q -ex $control`) $guiHelper_controlType = "spreadSheetEditor"	;


if (`hyperPanel                   -q -ex $control`) $guiHelper_controlType = "hyperPanel"		;
if (`outlinerEditor               -q -ex $control`) $guiHelper_controlType = "outlinerEditor"	;
if (`scriptedPanelType            -q -ex $control`) $guiHelper_controlType = "scriptedPanelType"	;

if	($guiHelper_controlType == "rowLayout")
	{string $children[] = `rowLayout -q -ca $control`;
	if	($children[0]=="AFGlabel" && $children[1]=="AFGfield" && $children[2]=="AFGslider")
		{$guiHelper_controlType = "attrFieldSliderGrp";}
	if	(`gmatch $control "intFieldGrp*"`)
		{$guiHelper_controlType = "intFieldGrp";}	
	if	(`gmatch $control "floatFieldGrp*"`)
		{$guiHelper_controlType = "floatFieldGrp";}
	if	(`gmatch $control "floatSliderButtonGrp*"`)
		{$guiHelper_controlType = "floatSliderButtonGrp";}
	if	(`gmatch $control "textFieldButtonGrp*"`)
		{$guiHelper_controlType = "textFieldButtonGrp";}
	if	(`gmatch "colorIndexSliderGrp*" $control`)
		{$guiHelper_controlType = "colorIndexSliderGrp";}
	if	(`gmatch "colorSliderButtonGrp*" $control`)
		{$guiHelper_controlType = "colorSliderButtonGrp";}
	if	(`gmatch "colorSliderButtonGrp*" $control`)
		{$guiHelper_controlType = "colorSliderButtonGrp";}
	if	(`gmatch "colorSliderGrp*" $control`)
		{$guiHelper_controlType = "colorSliderGrp";}
	if	(`gmatch "radioButtonGrp*" $control`)
		{$guiHelper_controlType = "radioButtonGrp";}

	}
return $guiHelper_controlType;
}


global proc string guiList_getWindowRootLayout(string $window)
{string $return = "window not found";
string $tok[];
string $layouts[] = `lsUI -type controlLayout`;
for	($layout in $layouts)
	{string $path = `setParent $layout`;
	 tokenize $path "|" $tok; //print $tok[0]; pn;
	 if 	($window == $tok[0])
		{if (`menuBarLayout -q -ex $tok[1]`)
		    {$return = $tok[2];}
		else {$return = $tok[1];}
		}
	}
return $return;
}


global proc string guiList_getWindowName(string $title)
{string $return = "window not found";
string $tok[];
string $layouts[] = `lsUI -type controlLayout`;
for	($layout in $layouts)
	{string $path = `setParent $layout`;
	 tokenize $path "|" $tok; //print $tok[0]; pn;
	 if 	(`window -q -ex $tok[0]` && `window -q -title $tok[0]`==$title)// $label = "Attribute Editor"
		{$return = $tok[0];	break;}
	}
return $return;
}


global proc guiHelperHelp()
{
string $helpText = 
(" guiHelper\n" + 
" By Jo Jürgens\n" + 
"\n" + 
" guiHelper is a tool meant to assist scripters when creating complex GUIs. The\n" + 
" user can add a guiHelper popup menu to any interface element in Maya. The menu\n" + 
" contains various commands, such as print name of  control, path to the control,\n" + 
" the control's flags (label, size, etc), and so on.\n" + 
"\n" + 
" To add a guiHelper menu to a GUI element, simply call guiHelper with the full\n" + 
" path to the control after having created it.\n" + 
"\n" + 
" Like this:\n" + 
"\n" + 
" window;\n" +
"      columnLayout;\n" +
"      guiHelper `button`;\n" +
" showWindow;\n" +
"\n" + 
" Or like this:\n" + 
"\n" + 
" window;\n" +
"      columnLayout;\n" +
"      string $button = `button`;\n" +
"      guiHelper $button;\n" +
" showWindow;\n" +
"\n" + 
" You can also add guiHelper menus later on, rather than doing it in the Mel script\n" + 
" that builds the GUI. For example:\n" + 
" guiHelper MayaWindow|mayaMainWindowForm|formLayout1|formLayout12|formLayout13|formLayout40|formLayout41|newSceneButton\n" +
" This will add a popupmenu to the New Scene button in the statusBar.\n" + 
"\n" + 
" If you already have a popup menu attached to the control, you can add the\n" + 
" guiHelper menu as a submenu by calling guiHelper_addToMenu followed by the name\n" + 
" of the control.\n" + 
"\n" + 
" window;\n" +
"      columnLayout;\n" +
"      string $button = `button`;\n" +
"          popupMenu;                  \n" +
"          menuItem menuItem1;         \n" +
"          menuItem menuItem2;         \n" +
"          guiHelper_addToMenu $button;\n" +
" showWindow;\n" +
"\n" + 
" You can add guiHelper menus to every control in the Maya interface and in all    \n" + 
" open windows by calling 'guiHelper_addMenuToAll (WindowName)', for example:       \n" + 
" 'guiHelper_addMenuToAll MayaWindow'; This may be helpful if you're trying to edit  \n" + 
" a part of the default interface, in which case you'll find the name of the       \n" + 
" control you're trying to acces. Run guiHelper_addMenuToAll and then simply right \n" + 
" click the control in question to get its name, path, etc. Be aware that this can \n" + 
" mess up Maya at times, so remove the menus as soon as you're done by calling     \n" + 
" 'guiHelper_removeMenuFromAll (WindowName)'.\n" +
"\n" +
" You can also make guiHelper print all the annotations for GUI controls by calling \n" +
" 'guiHelper_printAnnotation (WindowName)'. To print a list of controls that don't \n" + 
" have any annotation, call 'guiHelper_printMissingAnnotation (WindowName)'. \n" +
"\n" +
" To disable guiHelper, run this command: $guiHelper=1; from the commandLine or \n" + 
" before loading the gui.\n" +
"\n" + 
" guiHelper also includes guiList, a window containing a list of all controls in\n" + 
" the GUI. You can hide interface elements by double clicking them in the list;\n" + 
" an easy way to identify the different controls.\n" +
"\n" + 
" If you want to make the guiList show the contents of a window that you don't\n" + 
" know the name of, you can use the command guiList_getWindowName with the title\n" + 
" of the window (the name that is displayed in the titlebar) to get the window's\n" + 
" name. For example 'guiList_getWindowName \"Attribute Editor\"' returns AEWindow,\n" + 
" which is the actual name of that window. You can then call 'guiList AEWindow'.\n" + 
"\n" + 
" Please note that if you have the mayaLive plugin loaded, guiList will take a lot\n" + 
" longer to load if you're displaying the main Maya interface in it.\n");




if (`window -q -ex guiHelperHelp`) deleteUI guiHelperHelp;
window -w 615 -h 630 guiHelperHelp;
columnLayout -adjustableColumn true;
scrollField -h 600 -tx $helpText;
showWindow guiHelperHelp;
window -e -w 615 -h 630 guiHelperHelp;
}


global proc guiHelper_addMenuToAll(string $window)
{string $controls[];
if ($window != "all") $controls = `guiList_getWindowControls $window`;
if ($window == "all") $controls = `lsUI -long -controls`;

for ($cont in $controls) guiHelper $cont;
print ("\nAdded " + `size $controls` + " menus to " + $window);
}
 

global proc guiHelper_removeMenuFromAll(string $window)
{string $controls[];
if ($window != "all") $controls = `guiList_getWindowControls $window`;
if ($window == "all") $controls = `lsUI -long -controls`;

for	($control in $controls)
	{if (`popupMenu -q -ex ($control + "|guiHelperMenu")`)
	     deleteUI -menu ($control + "|guiHelperMenu");}
print ("\nRemoved " + `size $controls` + " menus from " + $window);
}



global proc string[] guiList_getWindowControls(string $window)
{
string $allControls[] = `lsUI -long -controls`;
string $winControls[]; clear $winControls;

for	($control in $allControls)
	{if	(`gmatch $control ($window + "|*")`)
		{$winControls[`size $winControls`] = $control;}
	}
return $winControls;
}

global proc guiList_popupMenuCommands(string $what)
{
string $items[] = `textScrollList -q -si guiList_list`;
string $path;
string $tok[];
tokenize $items[0] " |\*" $tok;
string $item = $tok[0];


string $layouts[] = `lsUI -long -controls`;
for	($layout in $layouts)
	{tokenize $layout "|" $tok;
	if ($item == $tok[`size $tok`-1])$path = $layout;
	}
string $pathArray[];
//tokenize $path "\*" $pathArray;
//$path = ($pathArray[0] + $pathArray[1]);
tokenize $path "|*" $pathArray;

string $pathString = "{";
for	($tokk in $pathArray)
	{$pathString += ("\"" + $tokk + "\", ");}
$pathString = (`substring $pathString 1 (size($pathString) -2)` + "}");

switch($what)
	{case "flags":
		pn; print `guiHelper_printFlags $path`;
	 break;
	 case "path":	
		guiHelper_doPrintPath $pathArray $path;
	 break;
	 case "parent":	
		print ("\n" + $pathArray[(`size $pathArray`-2)]);
	 break;
	 case "children":
		 if (`layout -q -ex $path`) {guiHelper_children $path;}else{print "\nNo children ";}
	 break;	 
	 case "siblings":
		guiHelper_siblings 0 0 $pathArray;
	 break;	 
		
	}
}





global proc guiHelper_printAnnotation(string $window)//guiHelper_printAnnotation MayaWindow controlPanelWin
{string $controls[];
if ($window != "all") $controls = `guiList_getWindowControls $window`;
if ($window == "all") $controls = `lsUI -long -controls`;

string $ann; string $tok[];  int $tabDepth;

for	($control in $controls)
	{$ann = `control -q -annotation $control`;
	if 	(`size $ann`>0)
		{tokenize $control "|" $tok;
		string $tab = " ";
		int $tokArraySize = (`size $tok`-1);
		int $tabDepth = (35 - `size $tok[$tokArraySize]`);

		for	($i=0; $i<$tabDepth; $i++)
			{$tab += " " ;}
		print ($tok[$tokArraySize] + ":" + $tab + "\"" + $ann + "\"\n");
		}
	}
}



global proc guiHelper_printMissingAnnotation(string $window)//guiHelper_printMissingAnnotation controlPanelWin
{string $controls[];
if ($window != "all") $controls = `guiList_getWindowControls $window`;
if ($window == "all") $controls = `lsUI -long -controls`;

string $ann; string $tok[];

for	($control in $controls)
	{$ann = `control -q -annotation $control`;
	if 	(`size $ann`==0 && !`layout -q -ex $control` && !`separator -q -ex $control`) 
		{tokenize $control "|" $tok;
		print $tok[`size $tok`-1]; pn;
		}
	}
}

global proc ps()
{print " ";}

global proc p (string $text)
{print $text;}

global proc pn()
{print "\n";}

